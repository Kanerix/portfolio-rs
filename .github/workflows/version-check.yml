name: Validate the package version
run-name: Validate package version ${{ inputs.package_version }}

on:
  workflow_call:
    inputs:
      deploy_env:
        description: Deployment environment (prod, stag or dev)
        required: true
        type: string

      package_version:
        description: The version of the package
        required: true
        type: string

jobs:
  validate-version:
    if: inputs.deploy_env == 'prod' || inputs.deploy_env == 'stag'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version against official SemVer Regex
        env:
          PACKAGE_VERSION: ${{ inputs.package_version }}
        run: |
          echo "Validating package version $PACKAGE_VERSION"

          SEMVER_REGEX='^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'

          if echo "$PACKAGE_VERSION" | grep -Pq "$SEMVER_REGEX"; then
            echo "SemVer regex matched version $PACKAGE_VERSION"
            exit 0
          else
            echo "SemVer regex did not match version $PACKAGE_VERSION"
            exit 1
          fi

      - name: Check if release exsists
        if: inputs.deploy_env == 'prod'
        env:
          PACKAGE_VERSION: ${{ inputs.package_version }}
        run: |
          CORE_PACKAGE_VERSION=$(echo $PACKAGE_VERSION | cut -d- -f1)

          # Make sure this is the latest core version (major.minor.patch).
          if git rev-parse "refs/tags/$MMP_VERSION" >/dev/null 2>&1; then
              echo "Tag $CORE_PACKAGE_VERSION already exist wihout metadata."
              echo "Please bump the major, minor or patch part of the version."
              exit 1
          fi

          # Make sure full version is not already released.
          if git rev-parse "refs/tags/$PACKAGE_VERSION" >/dev/null 2>&1; then
              echo "Tag $PACKAGE_VERSION already exist."
              echo "Please check the full version."
              exit 1
          fi

          echo "Version $PACKAGE_VERSION is valid."
