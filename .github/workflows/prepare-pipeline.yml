name: Prepare pipeline 

on:
  workflow_call:
    outputs:
      deploy_env:
        description: What kind of deployment this is
        value: ${{ jobs.prepare-pipeline.outputs.deploy_env }}
      
      package_version:
        description: The version of the package
        value: ${{ jobs.prepare-pipeline.outputs.package_version }}
      
      rust_toolchain:
        description: The toolchain for Rust to use
        value: ${{ jobs.prepare-pipeline.outputs.rust_toolchain }}

      image_name:
        description: The name of the image to build
        value: ${{ jobs.prepare-pipeline.outputs.image_name }}

jobs:
  prepare-pipeline:
      runs-on: ubuntu-latest

      outputs:
        deploy_env: ${{ steps.deploy-env.outputs.DEPLOY_ENV }}
        package_version: ${{ steps.package-version.outputs.PACKAGE_VERSION }}
        rust_toolchain: ${{ steps.rust-toolchain.outputs.RUST_TOOLCHAIN }}
        image_name: ${{ steps.image-name.outputs.IMAGE_NAME }}

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Set deployment variable 
          id: deploy-env
          env:
            BRANCH: ${{ github.ref_name }}
          run: |
            if [[ $BRANCH == "main" || $BRANCH == "master" ]]; then
                DEPLOY_ENV=prod
            elif [[ $BRANCH == "staging" ]]; then
                DEPLOY_ENV=stag
            else
                DEPLOY_ENV=test
            fi

            echo "DEPLOY_ENV="$DEPLOY_ENV
            echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_OUTPUT

        - name: Get package version
          id: package-version
          env:
            DEPLOY_ENV: ${{ steps.deploy-env.outputs.DEPLOY_ENV }}
          run: |
            echo "Checking package version..."
  
            if [[ $DEPLOY_ENV != "prod" ]]; then
              VERSION_SUFFIX="-$DEPLOY_ENV+$(git rev-parse --short HEAD)"
            fi

            PACKAGE_VERSION="$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')$VERSION_SUFFIX"
        
            PACKAGE_VERSION=$(echo $PACKAGE_VERSION) | tr -d ''

            echo "PACKAGE_VERSION=$PACKAGE_VERSION"
            echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        
        - name: Get toolchain 
          id: rust-toolchain
          env:
            RUST_TOOLCHAIN: ${{ vars.RUST_TOOLCHAIN }}
          run: |
            if  [[ -f rust-toolchain.toml ]]; then
                RUST_TOOLCHAIN=rust-toolchain.toml
            elif [[ -n $RUST_TOOLCHAIN ]]; then
                RUST_TOOLCHAIN=$RUST_TOOLCHAIN
            else
                RUST_TOOLCHAIN=stable
            fi

            echo "RUST_TOOLCHAIN="$RUST_TOOLCHAIN
            echo "RUST_TOOLCHAIN=$RUST_TOOLCHAIN" >> $GITHUB_OUTPUT

        - name: Set image name
          id : image-name
          env:
            GIT_REPOSITORY: ${{ github.repository }}
          run: |
            IMAGE_NAME=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
            echo "IMAGE_NAME=$IMAGE_NAME"
            echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

        - name: Write prepare summary
          run: |
            echo "### Prepare pipeline:               
            <table>
              <tr>
                <td>🚀 Deploy Environment</td>
                <td>${{ steps.deploy-env.outputs.DEPLOY_ENV }}</td>
              </tr>
              <tr>
                <td>📦 Package Version</td>
                <td>${{ steps.package-version.outputs.PACKAGE_VERSION }}</td>
              </tr>
              <tr>
                <td>🦀 Rust Toolchain</td>
                <td>${{ steps.rust-toolchain.outputs.RUST_TOOLCHAIN }}</td>
              </tr>
              <tr>
                <td>🐳 Image Name</td>
                <td>${{ steps.image-name.outputs.IMAGE_NAME }}</td>
              </tr>
            </table>" >> $GITHUB_STEP_SUMMARY
